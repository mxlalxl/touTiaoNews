{"remainingRequest":"D:\\forward\\code\\vue\\new vue\\hmtt_nnew\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\forward\\code\\vue\\new vue\\hmtt_nnew\\src\\views\\Home\\components\\ArticleList.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\forward\\code\\vue\\new vue\\hmtt_nnew\\src\\views\\Home\\components\\ArticleList.vue","mtime":1667380297575},{"path":"D:\\forward\\code\\vue\\new vue\\hmtt_nnew\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1664795348110},{"path":"D:\\forward\\code\\vue\\new vue\\hmtt_nnew\\node_modules\\babel-loader\\lib\\index.js","mtime":1663989856865},{"path":"D:\\forward\\code\\vue\\new vue\\hmtt_nnew\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1664795348110},{"path":"D:\\forward\\code\\vue\\new vue\\hmtt_nnew\\node_modules\\vue-loader\\lib\\index.js","mtime":1664795355419}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgQXJ0aWNsZUl0ZW0gZnJvbSAiQC9jb21wb25lbnRzL0FydGljbGVJdGVtLnZ1ZSI7DQppbXBvcnQgeyBnZXRBbGxBcnRpY2xlQVBJLCBkaXNsaWtlQXJ0aWNsZUFQSSwgcmVwb3J0QXJ0aWNsZUFQSSB9IGZyb20gIkAvYXBpIjsNCmltcG9ydCBOb3RpZnkgZnJvbSAiQC91aS9Ob3RpZnkuanMiOw0KDQpleHBvcnQgZGVmYXVsdCB7DQogIGNvbXBvbmVudHM6IHsNCiAgICBBcnRpY2xlSXRlbQ0KICB9LA0KICBwcm9wczogew0KICAgIC8vIGxpc3Q6IEFycmF5DQogICAgY2hhbm5lbElkOiBOdW1iZXINCiAgfSwNCiAgZGF0YSgpIHsNCiAgICByZXR1cm4gew0KICAgICAgbGlzdDogW10sIC8v5paH56ug5YiX6KGo5pWw57uEDQogICAgICBsb2FkaW5nOiBmYWxzZSwNCiAgICAgIGZpbmlzaGVkOiBmYWxzZSwNCiAgICAgIHRoZVRpbWU6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLA0KICAgICAgaXNMb2FkaW5nOiBmYWxzZQ0KICAgIH07DQogIH0sDQogIGFzeW5jIGNyZWF0ZWQoKSB7DQogICAgdGhpcy5nZXRBcnRpY2xlTGlzdEZuKCk7DQogIH0sDQogIG1ldGhvZHM6IHsNCiAgICAvLyDkuIrmi4nliqDovb3mm7TlpJoNCiAgICBhc3luYyBvbkxvYWQoKSB7DQogICAgICB0aGlzLmdldEFydGljbGVMaXN0Rm4oKTsNCiAgICB9LA0KICAgIGFzeW5jIGdldEFydGljbGVMaXN0Rm4oKSB7DQogICAgICBjb25zdCByZXMgPSBhd2FpdCBnZXRBbGxBcnRpY2xlQVBJKHsNCiAgICAgICAgY2hhbm5lbF9pZDogdGhpcy5jaGFubmVsSWQsDQogICAgICAgIHRpbWVzdGFtcDogdGhpcy50aGVUaW1lDQogICAgICB9KTsNCg0KICAgICAgdGhpcy5saXN0ID0gWy4uLnRoaXMubGlzdCwgLi4ucmVzLmRhdGEuZGF0YS5yZXN1bHRzXTsNCiAgICAgIHRoaXMudGhlVGltZSA9IHJlcy5kYXRhLmRhdGEucHJlX3RpbWVzdGFtcDsNCiAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlOyAvL+WmguaenOS4jeWFs++8jOW6lemDqOS4gOebtOaYr+WKoOi9veeKtuaAge+8jOS4jeS8muWGjeinpuWPkW9ubG9hZOS6i+S7tg0KDQogICAgICBpZiAocmVzLmRhdGEuZGF0YS5wcmVfdGltZXN0YW1wID09PSBudWxsKSB7DQogICAgICAgIC8v5pys5qyh6K+35rGC55qE5pyA5ZCO5LiA6aG15pWw5o2u77yM5rKh5pyJ5pu05aSa5pWw5o2u5LqGDQogICAgICAgIHRoaXMuZmluaXNoZWQgPSB0cnVlOw0KICAgICAgICByZXR1cm47DQogICAgICB9DQoNCiAgICAgIC8vIOmhtumDqOWKoOi9veeKtuaAgeaUueS4umZhbHNlDQogICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlOw0KICAgIH0sDQoNCiAgICAvLyDkuIvmi4nliLfmlrANCiAgICBhc3luYyBvblJlZnJlc2goKSB7DQogICAgICB0aGlzLmxpc3QgPSBbXTsNCiAgICAgIHRoaXMudGhlVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOw0KDQogICAgICB0aGlzLmdldEFydGljbGVMaXN0Rm4oKTsNCiAgICB9LA0KDQogICAgLy8g5Y+N6aaILeS4jeaEn+WFtOi2ow0KICAgIGFzeW5jIGRpc2xpa2VGbihpZCkgew0KICAgICAgLy8gdHJ5K2NhdGNo5o2V6I635ZCM5q2l5Luj56CB55qE5byC5bi4DQogICAgICB0cnkgew0KICAgICAgICBhd2FpdCBkaXNsaWtlQXJ0aWNsZUFQSSh7DQogICAgICAgICAgYXJ0SWQ6IGlkDQogICAgICAgIH0pOw0KICAgICAgICAvLyBjb25zb2xlLmxvZyhpZCk7DQoNCiAgICAgICAgLy8gY29uc29sZS5sb2cocmVzKTsNCiAgICAgICAgTm90aWZ5KHsgdHlwZTogInN1Y2Nlc3MiLCBtZXNzYWdlOiAi5Y+N6aaI5oiQ5YqfIiB9KTsNCiAgICAgICAgY29uc29sZS5sb2coIuaIkOWKn+S6hiIpOw0KICAgICAgfSBjYXRjaCAoZXJyb3IpIHsNCiAgICAgICAgY29uc29sZS5sb2coIuWksei0peS6hiIpOw0KICAgICAgfQ0KICAgIH0sDQoNCiAgICAvLyDlj43ppogt5Li+5oql5paH56ugDQogICAgYXN5bmMgcmVwb3J0Rm4oaWQsIHZhbHVlKSB7DQogICAgICBhd2FpdCByZXBvcnRBcnRpY2xlQVBJKHsNCiAgICAgICAgYXJ0SWQ6IGlkLA0KICAgICAgICB0eXBlOiB2YWx1ZQ0KICAgICAgfSk7DQogICAgICBOb3RpZnkoeyB0eXBlOiAic3VjY2VzcyIsIG1lc3NhZ2U6ICLkuL7miqXmiJDlip8iIH0pOw0KICAgIH0sDQogICAgLy8g5paH56ugLeeCueWHu+S6i+S7ti3ot7PovazliLDmlofnq6Dor6bmg4UNCiAgICBpdGVtQ2xpY2tGbihpZCkgew0KICAgICAgLy8gY29uc29sZS5sb2coIjEyMyIpOw0KICAgICAgdGhpcy4kcm91dGVyLnB1c2goew0KICAgICAgICBwYXRoOiBgL2RldGFpbD9hcnRfaWQ9JHtpZH1gDQogICAgICB9KTsNCiAgICB9DQogIH0NCn07DQo="},{"version":3,"sources":["ArticleList.vue"],"names":[],"mappings":";AA6BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ArticleList.vue","sourceRoot":"src/views/Home/components","sourcesContent":["<template>\r\n  <div>\r\n    <!-- 问题1：网页刚打开，created和onload里面的请求同时发送，请求的都是最新数据 -->\r\n    <!-- 在onload中，两次一样的数据合并，数据重复，key重复了 -->\r\n    <!-- 原因：van-list组件，组件挂载时，默认就会判断一次是触底 -->\r\n    <!-- 解决办法1:list组件添加：:immediate-check=\"false\" 上来初始化时不用判定 -->\r\n    <!-- 2：在onload第一行加一个list数组长度判断 -->\r\n    <van-pull-refresh v-model=\"isLoading\" @refresh=\"onRefresh\">\r\n      <van-list\r\n        v-model=\"loading\"\r\n        :finished=\"finished\"\r\n        finished-text=\"没有更多了\"\r\n        @load=\"onLoad\"\r\n        :immediate-check=\"false\"\r\n        offset=\"50\"\r\n      >\r\n        <ArticleItem\r\n          v-for=\"obj in list\"\r\n          :key=\"obj.art_id\"\r\n          :artObj=\"obj\"\r\n          @dislikeEV=\"dislikeFn\"\r\n          @reportEV=\"reportFn\"\r\n          @click.native=\"itemClickFn(obj.art_id)\"\r\n        ></ArticleItem>\r\n      </van-list>\r\n    </van-pull-refresh>\r\n  </div>\r\n</template>\r\n<script>\r\nimport ArticleItem from \"@/components/ArticleItem.vue\";\r\nimport { getAllArticleAPI, dislikeArticleAPI, reportArticleAPI } from \"@/api\";\r\nimport Notify from \"@/ui/Notify.js\";\r\n\r\nexport default {\r\n  components: {\r\n    ArticleItem\r\n  },\r\n  props: {\r\n    // list: Array\r\n    channelId: Number\r\n  },\r\n  data() {\r\n    return {\r\n      list: [], //文章列表数组\r\n      loading: false,\r\n      finished: false,\r\n      theTime: new Date().getTime(),\r\n      isLoading: false\r\n    };\r\n  },\r\n  async created() {\r\n    this.getArticleListFn();\r\n  },\r\n  methods: {\r\n    // 上拉加载更多\r\n    async onLoad() {\r\n      this.getArticleListFn();\r\n    },\r\n    async getArticleListFn() {\r\n      const res = await getAllArticleAPI({\r\n        channel_id: this.channelId,\r\n        timestamp: this.theTime\r\n      });\r\n\r\n      this.list = [...this.list, ...res.data.data.results];\r\n      this.theTime = res.data.data.pre_timestamp;\r\n      this.loading = false; //如果不关，底部一直是加载状态，不会再触发onload事件\r\n\r\n      if (res.data.data.pre_timestamp === null) {\r\n        //本次请求的最后一页数据，没有更多数据了\r\n        this.finished = true;\r\n        return;\r\n      }\r\n\r\n      // 顶部加载状态改为false\r\n      this.isLoading = false;\r\n    },\r\n\r\n    // 下拉刷新\r\n    async onRefresh() {\r\n      this.list = [];\r\n      this.theTime = new Date().getTime();\r\n\r\n      this.getArticleListFn();\r\n    },\r\n\r\n    // 反馈-不感兴趣\r\n    async dislikeFn(id) {\r\n      // try+catch捕获同步代码的异常\r\n      try {\r\n        await dislikeArticleAPI({\r\n          artId: id\r\n        });\r\n        // console.log(id);\r\n\r\n        // console.log(res);\r\n        Notify({ type: \"success\", message: \"反馈成功\" });\r\n        console.log(\"成功了\");\r\n      } catch (error) {\r\n        console.log(\"失败了\");\r\n      }\r\n    },\r\n\r\n    // 反馈-举报文章\r\n    async reportFn(id, value) {\r\n      await reportArticleAPI({\r\n        artId: id,\r\n        type: value\r\n      });\r\n      Notify({ type: \"success\", message: \"举报成功\" });\r\n    },\r\n    // 文章-点击事件-跳转到文章详情\r\n    itemClickFn(id) {\r\n      // console.log(\"123\");\r\n      this.$router.push({\r\n        path: `/detail?art_id=${id}`\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style lang=\"\">\r\n</style>"]}]}